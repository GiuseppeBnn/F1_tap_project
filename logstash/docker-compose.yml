version: '3.9'
services:

  #-------------------------------#
  # 🖥️ Zookeeper-service          #
  #-------------------------------#
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 10s
      retries: 5  

  #-------------------------------#
  # 🖥️ Kafka-Broker              #
  #-------------------------------#
  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 10s
      retries: 10  

  #-------------------------------#
  # 🖥️ Kakfa UI                  #
  #-------------------------------#
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8080:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

 #-------------------------------#
  # 🖥️ Initialize topics          #
  #-------------------------------#
  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - broker
      - zookeeper
      - kafka-ui
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server broker:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server broker:29092 --create --if-not-exists --topic LiveTimingData --replication-factor 1 --partitions 1
      

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server broker:29092 --list
      "

  #-------------------------------#
  # 🖥️ Logstash Producer          #
  #-------------------------------#
  logstash:
    build:
      context: ./LogstashDocker
      dockerfile: Dockerfile
    depends_on:
      broker:
        condition: service_healthy
    container_name: logstash
    volumes:
      - ./LogstashDocker/pipeline/:/usr/share/logstash/pipeline/
    environment: 
      - "LS_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "5044:5044"
      - "9600:9600"

    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "5044"]
      interval: 10s
      timeout: 10s
      retries: 100 

 # #-------------------------------#
 # # 🖥️ F1 Replay Script           #
 # #-------------------------------#
 # replay_script:
 #   build:
 #     context: ./ReplayScript
 #     dockerfile: Dockerfile
#
 #   depends_on:
 #     - logstash
 #     
 #   command: >
 #     sh -c "python3 F1SessionReplayProducer.py"
 #   container_name: f1_replay_script
    